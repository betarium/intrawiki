/* tslint:disable */
/* eslint-disable */
/**
 * intrawiki
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as express from 'express';
import { container } from 'tsyringe';
import * as runtime from '../runtime';
import type {
  ApiResultResponse,
  User,
  UserListResponse,
} from '../models';
import {
    ApiResultResponseFromJSON,
    ApiResultResponseToJSON,
    UserFromJSON,
    UserToJSON,
    UserListResponseFromJSON,
    UserListResponseToJSON,
} from '../models';

export interface CreateUserRequest {
    user: User;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetUserDetailRequest {
    id: number;
}

export interface UpdateUserRequest {
    id: number;
    user: User;
}

/**
 * UsersApi - interface
 * 
 * @export
 * @interface UsersApiInterface
 */
export interface UsersApi {
    /**
     */
    createUser(requestParameters: CreateUserRequest): Promise<User>;

    /**
     */
    deleteUser(requestParameters: DeleteUserRequest): Promise<ApiResultResponse>;

    /**
     */
    getUserDetail(requestParameters: GetUserDetailRequest): Promise<User>;

    /**
     */
    getUserList(): Promise<UserListResponse>;

    /**
     */
    updateUser(requestParameters: UpdateUserRequest): Promise<User>;

}


/*
export function initUsersApiSample(){
    container.register("UsersApi", { useValue: new UsersApiSample() });
}
*/

export function getUsersApiRoute(errorHandler?: runtime.ApiErrorHandler): express.Router {
    const errorHandlerInner = errorHandler ?? runtime.ApiErrorHandlerDefault

    const router = express.Router();

    const api = container.resolve<UsersApi>('UsersApi');

    router.put('/users', async function (req: express.Request, res: express.Response, next: express.NextFunction) {
        try{
            const user = req.body as User;

            const input = {
                user: user,
            } as CreateUserRequest;

            const output = await api.createUser(input);
            res.json(output);
        }
        catch(err){
            await errorHandlerInner(err, req, res, next);
        }
    })

    router.delete('/users/:id', async function (req: express.Request, res: express.Response, next: express.NextFunction) {
        try{
            const id = runtime.convert_number(req.params['id']);

            const input = {
                id: id,
            } as DeleteUserRequest;

            const output = await api.deleteUser(input);
            res.json(output);
        }
        catch(err){
            await errorHandlerInner(err, req, res, next);
        }
    })

    router.get('/users/:id', async function (req: express.Request, res: express.Response, next: express.NextFunction) {
        try{
            const id = runtime.convert_number(req.params['id']);

            const input = {
                id: id,
            } as GetUserDetailRequest;

            const output = await api.getUserDetail(input);
            res.json(output);
        }
        catch(err){
            await errorHandlerInner(err, req, res, next);
        }
    })

    router.get('/users', async function (req: express.Request, res: express.Response, next: express.NextFunction) {
        try{


            const output = await api.getUserList();
            res.json(output);
        }
        catch(err){
            await errorHandlerInner(err, req, res, next);
        }
    })

    router.patch('/users/:id', async function (req: express.Request, res: express.Response, next: express.NextFunction) {
        try{
            const user = req.body as User;
            const id = runtime.convert_number(req.params['id']);

            const input = {
                user: user,
                id: id,
            } as UpdateUserRequest;

            const output = await api.updateUser(input);
            res.json(output);
        }
        catch(err){
            await errorHandlerInner(err, req, res, next);
        }
    })


    return router;
}

