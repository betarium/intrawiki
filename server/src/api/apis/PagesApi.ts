/* tslint:disable */
/* eslint-disable */
/**
 * intrawiki
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as express from 'express';
import { container } from 'tsyringe';
import * as runtime from '../runtime';
import type {
  ApiResultResponse,
  Page,
} from '../models';
import {
    ApiResultResponseFromJSON,
    ApiResultResponseToJSON,
    PageFromJSON,
    PageToJSON,
} from '../models';

export interface CreatePageRequest {
    page: Page;
}

export interface DeletePageRequest {
    id: number;
}

export interface GetPageDetailRequest {
    id: number;
}

export interface GetPageForTitleRequest {
    title: string;
}

export interface UpdatePageRequest {
    id: number;
    page: Page;
}

/**
 * PagesApi - interface
 * 
 * @export
 * @interface PagesApiInterface
 */
export interface PagesApi {
    /**
     */
    createPage(requestParameters: CreatePageRequest): Promise<Page>;

    /**
     */
    deletePage(requestParameters: DeletePageRequest): Promise<ApiResultResponse>;

    /**
     */
    getPageDetail(requestParameters: GetPageDetailRequest): Promise<Page>;

    /**
     */
    getPageForTitle(requestParameters: GetPageForTitleRequest): Promise<Page>;

    /**
     */
    updatePage(requestParameters: UpdatePageRequest): Promise<Page>;

}


/*
export function initPagesApiSample(){
    container.register("PagesApi", { useValue: new PagesApiSample() });
}
*/

export function getPagesApiRoute(errorHandler?: runtime.ApiErrorHandler): express.Router {
    const errorHandlerInner = errorHandler ?? runtime.ApiErrorHandlerDefault

    const router = express.Router();

    const api = container.resolve<PagesApi>('PagesApi');

    router.put('/pages', async function (req: express.Request, res: express.Response, next: express.NextFunction) {
        try{
            const page = req.body as Page;

            const input = {
                page: page,
            } as CreatePageRequest;

            const output = await api.createPage(input);
            res.json(output);
        }
        catch(err){
            await errorHandlerInner(err, req, res, next);
        }
    })

    router.delete('/pages/:id', async function (req: express.Request, res: express.Response, next: express.NextFunction) {
        try{
            const id = runtime.convert_number(req.params['id']);

            const input = {
                id: id,
            } as DeletePageRequest;

            const output = await api.deletePage(input);
            res.json(output);
        }
        catch(err){
            await errorHandlerInner(err, req, res, next);
        }
    })

    router.get('/pages/:id', async function (req: express.Request, res: express.Response, next: express.NextFunction) {
        try{
            const id = runtime.convert_number(req.params['id']);

            const input = {
                id: id,
            } as GetPageDetailRequest;

            const output = await api.getPageDetail(input);
            res.json(output);
        }
        catch(err){
            await errorHandlerInner(err, req, res, next);
        }
    })

    router.get('/pages', async function (req: express.Request, res: express.Response, next: express.NextFunction) {
        try{
            const title = runtime.convert_string(req.query['title']);

            const input = {
                title: title,
            } as GetPageForTitleRequest;

            const output = await api.getPageForTitle(input);
            res.json(output);
        }
        catch(err){
            await errorHandlerInner(err, req, res, next);
        }
    })

    router.patch('/pages/:id', async function (req: express.Request, res: express.Response, next: express.NextFunction) {
        try{
            const page = req.body as Page;
            const id = runtime.convert_number(req.params['id']);

            const input = {
                page: page,
                id: id,
            } as UpdatePageRequest;

            const output = await api.updatePage(input);
            res.json(output);
        }
        catch(err){
            await errorHandlerInner(err, req, res, next);
        }
    })


    return router;
}

